<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <welcome-file-list>
        <welcome-file>/WEB-INF/view/login.jsp</welcome-file>
    </welcome-file-list>

    
    <!--配置mvc的核心控制器-->
    <servlet>
        <!--3.servlet的内部名称-->
        <servlet-name>mvc</servlet-name>
        <!--4.servlet的类全名：包名加简单类名-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 修改配置文件mvc.xml的查找路径 -->
        <init-param>
            <!--通过contextConfigLocation配置spring-->
            <param-name>contextConfigLocation</param-name>
            <!--classpath：只会到你的class路径中查找找文件;
                classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找.-->
            <param-value>classpath:mvc.xml</param-value>
        </init-param>
        <!--优先加载，越小越优先-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <!--2.servlet的映射内部名称，通过他可以找到上面的servlet的内部名称-->
        <servlet-name>mvc</servlet-name>
        <!--1.请求servlet的映射路径-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!--配置乱码过滤器-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--初始化时改变成员变量-->
        <init-param>
            <!--将编码集改为UTF-8-->
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <!--是否强制覆盖请求编码集-->
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <!--是否强制覆盖响应编码集-->
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <!--处理静态资源文件
            1.将所有请求使用*.do的形式-->
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--2.使用默认的servlet放行静态资源文件-->
    <!--<servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
        <url-pattern>*.js</url-pattern>
        <url-pattern>*.png</url-pattern>
        <url-pattern>*.jpg</url-pattern>
        <url-pattern>*.gif</url-pattern>
    </servlet-mapping>-->

    <!--3.使用mvc标签-->


    <!--使用监听器初始化spring的ioc容器
    ContextLoaderListener会读取这些XML文件并产生 WebApplicationContext对象，
    然后将这个对象放置在ServletContext的属性
    里，这样我们只要可以得到Servlet就可 以得到WebApplicationContext对象，
    并利用这个对象访问spring 容器管理的bean。-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!--使用全局初始化参数告诉spring去哪找配置文件-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring.xml</param-value>
    </context-param>


</web-app>
